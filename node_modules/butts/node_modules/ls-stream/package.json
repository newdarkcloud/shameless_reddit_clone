{
  "name": "ls-stream",
  "version": "1.0.0",
  "description": "readable stream of file paths + stat objects",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "browser": {
    "./fs-base.js": "./fs-browser.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/chrisdickinson/ls-stream.git"
  },
  "keywords": [
    "ls",
    "-R",
    "stream"
  ],
  "author": {
    "name": "Chris Dickinson",
    "email": "chris@neversaw.us"
  },
  "license": "MIT",
  "dependencies": {
    "through": "~2.2.7"
  },
  "devDependencies": {
    "tape": "~2.1.0"
  },
  "readme": "# ls-stream\n\na readable stream of file and directories paths and entries.\n\n```javascript\nvar ls = require('ls-stream')\n\nls('.git')\n    .on('data', console.log.bind(console))\n\n```\n\n## API\n\n#### ls([fs,] directory) -> ls stream\n\ncreate a readable stream of entry objects.\n\nwill start emitting data on next tick unless paused.\n\nusers may optionally provide their own `fs` object if native `fs` is not\navailable for whatever reason (e.g., in browser).\n\n#### 'data' Entry object\n\n```javascript\n{ path: \"path/to/file-or-dir\"\n, stat: fs.Stat object }\n```\n\n#### Entry.ignore([bool=true]) -> undefined\n\nIf called on the same event loop turn as the event is\nreceived, prevents recursing into this directory (or is\na no-op if the entry represents a file). Optionally takes\na single argument which defaults to `true` to set the\n\"ignored\" status.\n\n```javascript\nvar through = require('through')\n  , ls = require('ls-stream')\n\nls('/path')\n  .pipe(through(function(entry) {\n    console.log(entry.path)\n    if(entry.path == \"/path/something\") {\n      // if we see \"/path/something\" *don't* list files\n      // and dirs that it contains.\n      entry.ignore()\n    }\n  }))\n\n```\n\n**Warning:** As aforementioned, this only works if the entry\nis ignored on the same event loop turn. For example, the following\ncode would *fail* to ignore the given entry:\n\n```javascript\n// WARNING: this will not work:\nls('/path')\n  .pipe(through(function(entry) {\n    // by the time we tell the entry that it\n    // should be ignored, `ls` has already\n    // recursed into it!\n    setTimeout(function() {\n      entry.ignore()\n    }, 0)\n  }))\n```\n\n## license\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/chrisdickinson/ls-stream/issues"
  },
  "_id": "ls-stream@1.0.0",
  "dist": {
    "shasum": "defa6c953e5aefe902e85a2804c30160bce20cc7"
  },
  "_from": "ls-stream@^1.0.0",
  "_resolved": "https://registry.npmjs.org/ls-stream/-/ls-stream-1.0.0.tgz"
}
